<?xml version="1.0" encoding="windows-1252" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1542px" preserveAspectRatio="none" style="width:2033px;height:1542px;background:#FFFFFF;" version="1.1" viewBox="0 0 2033 1542" width="2033px" zoomAndPan="magnify"><script xmlns=""/><defs/><g><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="154" x="10" y="751.8594"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="20" y="774.8545">Design Techniques</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="159" x="214" y="188.8906"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="224" y="211.8857">Divide and Conquer</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="57" x="423" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="433" y="99.292">How?</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="401" x="530" y="20"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="381" x="540" y="42.9951">Recursively divide problem into smaller subproblems</text><path d="M480,94.4453 L490,94.4453 C505,94.4453 505,38.1484 520,38.1484 L530,38.1484 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="266" x="530" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="540" y="99.292">Solve subproblems independently</text><path d="M480,94.4453 L490,94.4453 C505,94.4453 505,94.4453 520,94.4453 L530,94.4453 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="477" x="530" y="132.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="457" x="540" y="155.5889">Combine solutions into a single solution to the original problem</text><path d="M480,94.4453 L490,94.4453 C505,94.4453 505,150.7422 520,150.7422 L530,150.7422 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M373,207.0391 L383,207.0391 C398,207.0391 398,94.4453 413,94.4453 L423,94.4453 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="89" x="423" y="273.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="433" y="296.3311">Examples</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="857" x="562" y="188.8906"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="837" x="572" y="211.8857">Mergesort: sort an array by dividing it into two halves, sorting the halves, and merging them together. [CLRS, Knuth]</text><path d="M512,291.4844 L522,291.4844 C537,291.4844 537,207.0391 552,207.0391 L562,207.0391 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="1039" x="562" y="245.1875"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1019" x="572" y="268.1826">Quicksort: sort an array by partitioning it into two subarrays around a pivot element, and then recursively sorting the subarrays. [CLRS, Knuth]</text><path d="M512,291.4844 L522,291.4844 C537,291.4844 537,263.3359 552,263.3359 L562,263.3359 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="1225" x="562" y="301.4844"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1205" x="572" y="324.4795">Strassen's Algorithm: multiply two matrices by recursively dividing them into smaller submatrices, computing intermediate matrices, and combining the results. [CLRS]</text><path d="M512,291.4844 L522,291.4844 C537,291.4844 537,319.6328 552,319.6328 L562,319.6328 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="1459" x="562" y="357.7813"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1439" x="572" y="380.7764">The Closest Pair Problem: find the pair of points in a set that are closest together by recursively dividing the set and computing the closest pairs in each subset, and then combining the results. [CLRS]</text><path d="M512,291.4844 L522,291.4844 C537,291.4844 537,375.9297 552,375.9297 L562,375.9297 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M373,207.0391 L383,207.0391 C398,207.0391 398,291.4844 413,291.4844 L423,291.4844 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M164,770.0078 L174,770.0078 C189,770.0078 189,207.0391 204,207.0391 L214,207.0391 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="183" x="214" y="582.9688"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="224" y="605.9639">Dynamic Programming</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="57" x="447" y="470.375"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="457" y="493.3701">How?</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="318" x="554" y="414.0781"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="298" x="564" y="437.0732">Divide problem into smaller subproblems</text><path d="M504,488.5234 L514,488.5234 C529,488.5234 529,432.2266 544,432.2266 L554,432.2266 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="483" x="554" y="470.375"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="463" x="564" y="493.3701">Compute solutions to subproblems, storing intermediate results</text><path d="M504,488.5234 L514,488.5234 C529,488.5234 529,488.5234 544,488.5234 L554,488.5234 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="549" x="554" y="526.6719"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="529" x="564" y="549.667">Combine solutions to subproblems into a solution to the original problem</text><path d="M504,488.5234 L514,488.5234 C529,488.5234 529,544.8203 544,544.8203 L554,544.8203 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M397,601.1172 L407,601.1172 C422,601.1172 422,488.5234 437,488.5234 L447,488.5234 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="89" x="447" y="667.4141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="457" y="690.4092">Examples</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="881" x="586" y="582.9688"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="861" x="596" y="605.9639">Rod Cutting: find the maximum revenue from cutting a rod into pieces of different lengths with different values. [CLRS]</text><path d="M536,685.5625 L546,685.5625 C561,685.5625 561,601.1172 576,601.1172 L586,601.1172 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="1068" x="586" y="639.2656"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1048" x="596" y="662.2607">Matrix-Chain Multiplication: find the optimal way to multiply a chain of matrices by dividing it into subproblems and combining the results. [CLRS]</text><path d="M536,685.5625 L546,685.5625 C561,685.5625 561,657.4141 576,657.4141 L586,657.4141 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="1390" x="586" y="695.5625"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1370" x="596" y="718.5576">Longest Common Subsequence: find the longest common subsequence between two sequences by dividing the problem into subproblems and computing intermediate results. [CLRS, Knuth]</text><path d="M536,685.5625 L546,685.5625 C561,685.5625 561,713.7109 576,713.7109 L586,713.7109 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="1228" x="586" y="751.8594"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1208" x="596" y="774.8545">Optimal Binary Search Trees: find the optimal binary search tree for a set of keys with given probabilities by computing subproblems and combining the results. [CLRS]</text><path d="M536,685.5625 L546,685.5625 C561,685.5625 561,770.0078 576,770.0078 L586,770.0078 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M397,601.1172 L407,601.1172 C422,601.1172 422,685.5625 437,685.5625 L447,685.5625 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M164,770.0078 L174,770.0078 C189,770.0078 189,601.1172 204,601.1172 L214,601.1172 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="155" x="214" y="948.8984"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="224" y="971.8936">Greedy Algorithms</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="57" x="419" y="836.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="429" y="859.2998">How?</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="225" x="526" y="808.1563"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="536" y="831.1514">Make locally optimal choices</text><path d="M476,854.4531 L486,854.4531 C501,854.4531 501,826.3047 516,826.3047 L526,826.3047 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="406" x="526" y="864.4531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="386" x="536" y="887.4482">Combine locally optimal choices into a global solution</text><path d="M476,854.4531 L486,854.4531 C501,854.4531 501,882.6016 516,882.6016 L526,882.6016 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M369,967.0469 L379,967.0469 C394,967.0469 394,854.4531 409,854.4531 L419,854.4531 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="89" x="419" y="1005.1953"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="429" y="1028.1904">Examples</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="1041" x="558" y="920.75"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1021" x="568" y="943.7451">Huffman Coding: compress a message by encoding frequently-occurring characters with shorter codes, using a prefix-free code. [CLRS, Knuth]</text><path d="M508,1023.3438 L518,1023.3438 C533,1023.3438 533,938.8984 548,938.8984 L558,938.8984 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="887" x="558" y="977.0469"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="867" x="568" y="1000.042">Fractional Knapsack: fill a knapsack with a maximum weight by selecting items with the highest value per weight. [CLRS]</text><path d="M508,1023.3438 L518,1023.3438 C533,1023.3438 533,995.1953 548,995.1953 L558,995.1953 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="1076" x="558" y="1033.3438"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1056" x="568" y="1056.3389">Dijkstra's Algorithm: find the shortest path between two nodes in a graph by making locally optimal choices and updating distances. [CLRS, Knuth]</text><path d="M508,1023.3438 L518,1023.3438 C533,1023.3438 533,1051.4922 548,1051.4922 L558,1051.4922 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="889" x="558" y="1089.6406"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="869" x="568" y="1112.6357">Prim's Algorithm: find the minimum spanning tree of a graph by making locally optimal choices and adding edges. [CLRS]</text><path d="M508,1023.3438 L518,1023.3438 C533,1023.3438 533,1107.7891 548,1107.7891 L558,1107.7891 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M369,967.0469 L379,967.0469 C394,967.0469 394,1023.3438 409,1023.3438 L419,1023.3438 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M164,770.0078 L174,770.0078 C189,770.0078 189,967.0469 204,967.0469 L214,967.0469 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="192" x="214" y="1314.8281"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="224" y="1337.8232">Randomized Algorithms</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="57" x="456" y="1202.2344"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="466" y="1225.2295">How?</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="270" x="563" y="1145.9375"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="250" x="573" y="1168.9326">Use randomness to solve problems</text><path d="M513,1220.3828 L523,1220.3828 C538,1220.3828 538,1164.0859 553,1164.0859 L563,1164.0859 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="300" x="563" y="1202.2344"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="280" x="573" y="1225.2295">Probability of success can be amplified</text><path d="M513,1220.3828 L523,1220.3828 C538,1220.3828 538,1220.3828 553,1220.3828 L563,1220.3828 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="396" x="563" y="1258.5313"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="573" y="1281.5264">Some problems can only be solved with randomness</text><path d="M513,1220.3828 L523,1220.3828 C538,1220.3828 538,1276.6797 553,1276.6797 L563,1276.6797 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M406,1332.9766 L416,1332.9766 C431,1332.9766 431,1220.3828 446,1220.3828 L456,1220.3828 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="89" x="456" y="1399.2734"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="466" y="1422.2686">Examples</text><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="702" x="595" y="1314.8281"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="682" x="605" y="1337.8232">Quicksort: randomize the choice of pivot element to avoid worst-case scenarios. [CLRS, Knuth]</text><path d="M545,1417.4219 L555,1417.4219 C570,1417.4219 570,1332.9766 585,1332.9766 L595,1332.9766 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="816" x="595" y="1371.125"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="796" x="605" y="1394.1201">Las Vegas Algorithms: use randomness to guarantee a correct solution, but with uncertain running time. [CLRS]</text><path d="M545,1417.4219 L555,1417.4219 C570,1417.4219 570,1389.2734 585,1389.2734 L595,1389.2734 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="856" x="595" y="1427.4219"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="836" x="605" y="1450.417">Monte Carlo Algorithms: use randomness to approximate a solution, with a known probability of error. [CLRS, Knuth]</text><path d="M545,1417.4219 L555,1417.4219 C570,1417.4219 570,1445.5703 585,1445.5703 L595,1445.5703 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.2969" rx="7.5" ry="7.5" style="stroke:#181818;stroke-width:1.5;" width="738" x="595" y="1483.7188"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="718" x="605" y="1506.7139">Skip Lists: use probabilistic skipping to create a data structure with logarithmic search time. [CLRS]</text><path d="M545,1417.4219 L555,1417.4219 C570,1417.4219 570,1501.8672 585,1501.8672 L595,1501.8672 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M406,1332.9766 L416,1332.9766 C431,1332.9766 431,1417.4219 446,1417.4219 L456,1417.4219 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M164,770.0078 L174,770.0078 C189,770.0078 189,1332.9766 204,1332.9766 L214,1332.9766 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><!--SRC=[bLTDSzis4BthL-ojiSVED4dJwVZID78-9f4chcNxqka10bSaAX9W0L2A-klx5g0aIf6R-kAnmGNsxRxt5l2R49MFZR55ezhHA2oDRPLN3OLA5MvjR4aBLGSUVF6kiuLsthAd5wy77sfZEMvQ9kTZvKQZSxhcO4fBTwmhQ_xkE8pEiMXMfc1Ijg2nirZrM3sdZsxzg_noJhUiEn_CYkiD5JcuzMvUSqF6HaUXKNMDvA6Rz-iXRvovUiN3PSGNt39-s5XlSj3ODNC0fU3gBXfdGpvKKK2nzNwTi1WhASQKngfwYo61VVTLDMtDVTuf-v83ghuY-OdII7clDZJl2v0scfWJnRMZIW5ek4ZHyatoRDUaBmqExDSRu2WPl_ZdzCTuSZkxeC-sYzMVEVNldT7BHrA3bMYabEFqw50A2eWLCb5yQrOk4gC-j2g3G4vBVi354EtkY9EePj6h4DZ-4EYtkaG7OzLSKTFLqRGuI30qAdgZEGXGVqpuhlPZlhUxBaYxfkqI7CImRxWmAZBj0wG4dRZUOlOSW62Bk8TwXm_ZsWKEaMwKyNIJQRwYXSbDG1-nx1RKEgGIkOXOEEARGiCza-xtRvdwhvhIpXvRNu2iRe-GN2a5Arr9nGWVqF6zWkXwOrLZj5HHmfCmTddahkkdE6gSG0xD4jqm2XAEeFUOXHxOOuOxF6FdlwSRxzPXXdHHkZZWgr5VJTDXKF6ARSUqyAuXdSEGnsDJIjaQ5W62sS8i5koXVAhPbh4Aj8Pa1yihLMDw7IfdAbBxUZck5EYQPcqRhQI40HZNHeFkqXgUHCwT1nJfj17PXrRuPbmC6_K_9JrnjXGjeV4DsZaJ4M7CMiq3N7KVf7DGs0VHdEEQ8ROqAlh5Gt395GS2-XRbANSUmZsS6L_wHhq5vtv3CrOU3hZppE54E-SvAkIeY2XQEDyR4prTygOdiOG7RKAhvgR6FCorx14-jSFq0TcApNwoXIE7JTLI-glXgSqEiAwSS7neYKU2jeueQu2kTyOuOO2FtMBHOEQFNP4y85K1CGh17HA2Abbg1O7fEvoGwCHTUEaqvbDoBdJebGPBVSD2XJcFOO0zCaUxa6s3SnUG-q9QBPzEalXUJW9KeFviLHkKNWfvTOq3blr2pg9sDbspAQieE0Fk7vrL4uMD59ZkHaI8M9CDgGMulEbGzzVchsN0pNDuw-oaa-jACnR73aLkfT8yrp4qsqgmD6efG1vZI8JIjOLAQ0k3LvIOv6HFRhnf7e64yPnQ45fbi-Aakv3lqu2e8h7BHName-WM7rrZ_k7YSR7U1sWynLdHZNWvlQ8Exu6RdNqs0YzqMakqXlJcUCf1aMPXkDW-mvhz_XJZB93FEHzTP5xtIK_eUl2iyTiYyZsPoawtyV358hZLoXcSxNo8brgXhA0PGyAuqxHCLA07BjM06GoQxfjsb1tiWI76ChATnxqUTuwye7aNSpaT-FTH9hhlUYvDmqStXiCvD5Q-Tjz9gbhq3_QGeQa6wNhhBArR3sTQ8eMzTwSVYREbQMa2aVQvTXj3n5C13_YsJO0TQSyv9PIDlD5tEdPuuQIyjIjLWYoR-i4xh77q1Y_jtRyIDpMwTZ-Tq0gJHQxr5yzV_lZorVDNS9vw_UpUvY9aOXayk-Maiz6p3pSJbDjvS2okycQUAZyRVL8hHRUTbRWhah-UtKtFQFPkkqZlxCfuPqKEeqyFqnm4fSTPws8A_lcdoxUuLsViWOaUfgDhNYXCTspL_G2zltj_-SjeeYneBv68xMYC9tBq6toR_Gi0]--></g></svg>